
services:

  corevox_app:
    container_name: ${PUBLIC_APP_NAME}
    restart: always
    build:
      context: ./app
      dockerfile: Dockerfile.dev
    depends_on:
      - corevox_postgres
      - corevox_coturn
    volumes:
      - ./app:/app
      - /app/_build
      - /app/deps
    ports:
      - "4000:4000"
    env_file: ./.env
    environment:
      - MIX_ENV=dev
      - GUARDIAN_SECRET=${GUARDIAN_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_URL=${POSTGRES_URL}
      - PUBLIC_CLIENT_HTTP_URL=${PUBLIC_CLIENT_HTTP_URL}
    command: sh -c "mix setup && mix phx.server"

  corevox_web:
    container_name: corevox_web
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "4321:4321"

    depends_on:
      - corevox_postgres
      - corevox_coturn
      - corevox_app
    volumes:
      - ./web:/app
      - /app/node_modules
    env_file: ./.env

    environment:
      - NODE_ENV=development
      - PUBLIC_SIGNAL_HOST=${PUBLIC_SIGNAL_HOST}
      - PUBLIC_SIGNAL_PORT=${PUBLIC_SIGNAL_PORT}
      - PUBLIC_SIGNAL_SECURE=${PUBLIC_SIGNAL_SECURE}
      - PUBLIC_SIGNAL_PATH=${PUBLIC_SIGNAL_PATH}
      - PUBLIC_APP_NAME=${PUBLIC_APP_NAME}
      - PUBLIC_APP_HTTP_URL=${PUBLIC_APP_HTTP_URL}
      - PUBLIC_APP_SOCKET_URL=${PUBLIC_APP_SOCKET_URL}
      - PUBLIC_TURN_USER=${PUBLIC_TURN_USER}
      - PUBLIC_TURN_PASSWORD=${PUBLIC_TURN_PASSWORD}
      - PUBLIC_TURN_REALM=${PUBLIC_TURN_REALM}
      - PUBLIC_STUN_SERVER_URL=${PUBLIC_STUN_SERVER_URL}
      - PUBLIC_TURN_SERVER_URL=${PUBLIC_TURN_SERVER_URL}

    command: npm run dev -- --host 0.0.0.0

  corevox_signal_server:
    container_name: corevox_signal_server
    restart: unless-stopped
    env_file: ./.env
    build:
      context: ./signal-server
      dockerfile: Dockerfile.dev
    ports:
      - "9000:9000"
    volumes:
      - ./signal-server:/usr/src/app
      - ./signal-server/node_modules:/usr/src/app/node_modules

  nginx:
    image: nginx:stable-alpine
    container_name: corevox_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    depends_on:
      - corevox_web
      - corevox_signal_server
      - corevox_app

  certbot:
    image: certbot/certbot
    container_name: corevox_certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot


  corevox_coturn:
    container_name: corevox_coturn
    image: coturn/coturn
    restart: unless-stopped
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49160-49200:49160-49200/udp"
    env_file: ./.env
    command: >
      turnserver
        -a
        -v
        --no-tls
        --no-dtls
        --lt-cred-mech
        --fingerprint
        --user=${PUBLIC_TURN_USER}:${PUBLIC_TURN_PASSWORD}
        --realm=${PUBLIC_TURN_REALM}
        --listening-ip=0.0.0.0
        --min-port=49160
        --max-port=49200
        --log-file=/coturn.log
        --no-multicast
        --cli-password=${COTURN_CLI_PASSWORD}
    volumes:
      - ./coturn/logs:/var/log

  corevox_postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    env_file: ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}

    volumes:
      - ./data:/var/lib/postgresql/data
