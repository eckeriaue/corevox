services:
  corevox_app:
    container_name: corevox_app
    restart: always
    build:
      context: ./app
      dockerfile: Dockerfile
    depends_on:
      - corevox_postgres
      - corevox_coturn
    ports:
      - "4000:4000"
    env_file: ./.env
    environment:
      - MIX_ENV=prod
      - GUARDIAN_SECRET=${GUARDIAN_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_URL=${POSTGRES_URL}
    command: sh -c "mix deps.get --only prod && mix release --overwrite && _build/prod/rel/corevox/bin/server"
    networks:
      - corevox_network

  corevox_web:
    container_name: corevox_web
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - corevox_postgres
      - corevox_coturn
      - corevox_app
    env_file: ./.env
    environment:
      - NODE_ENV=production
      - PUBLIC_TURN_USER=${PUBLIC_TURN_USER}
      - PUBLIC_TURN_PASSWORD=${PUBLIC_TURN_PASSWORD}
      - PUBLIC_TURN_REALM=${PUBLIC_TURN_REALM}
    command: npm run start
    networks:
      - corevox_network

  corevox_coturn:
    container_name: corevox_coturn
    image: instrumentisto/coturn
    restart: unless-stopped
    ports:
      - "3478:3478/tcp"
      - "3478:3478/udp"
      - "49160-49200:49160-49200/udp"
    command: >
      turnserver
        -a
        -v
        --lt-cred
        --fingerprint
        --user=${PUBLIC_TURN_USER}:${PUBLIC_TURN_PASSWORD}
        --realm=${PUBLIC_TURN_REALM}
        --total-quota=100
        --bps-capacity=0
        --min-port=49160
        --max-port=49200
    env_file:
      - ./.env
    networks:
      - corevox_network

  corevox_postgres:
    container_name: corevox_postgres
    image: postgres:17-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file: ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - corevox_network

networks:
  corevox_network:
    driver: bridge
